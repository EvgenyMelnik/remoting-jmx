This file documents the protocol in use for Version 2 messages.

This version of the protocol is almost identical to version 1 except that before JMX message processing begins
there are a couple of additional internal invocations to allow for some additional information to be sent to the
server before the communication really begins.

 setKeyPair(String name, String value) - Sets a key value pair within the connection specific state map.
 String begin() - Starts the JMX message processing, the start process begins by using the MBeanServerLocator provided to the server
           to identify which MBeanServer to use based on the accumulated state within the connection specific state map,
           setKeyPair could have been called multiple times allowing for multiple parameters to be used in the selection.
           
           Note - the return type to begin is now a String representing the connection ID - this replaces the connection ID
           
Once begin has been called neither of these message types can be subsequently used.

The majority of the methods of the MBeanServerConnection are Request/Response
based with the request originating from the client, however there needs to be
support for concurrent access and notifications.

By this stage the version of the exchange will have been negotiated so the JMX prefix can now
be dropped, the purpose of thise 3 bytes was to make it easier to detect a mis-connection but once
negotiation is complete we know the connection is correctly established.
  
* Message IDs

The Message IDs will be defined in the context of the initiating side of the message exchange, for most messages the message 
will originate on the remote client to be sent to the server for the server to send a response.

The messages IDs will be defined in the range 00 to 7F.  The response id will be in the form {message id} ^ 0x80.  
Using this format will make it very easy to detect by only checking the most significant bit of the first byte if the message
just read is a new request or in response to an existing request/response exchange. 

The general message format will be: -

* Request Messages * 
{message id}{correlation id}{payload}

(Where the {payload} definition is specific to the message)

* Response Messages *
{response id}{correlation id}{outcome}{payload}

(where {payload} definition is specific to both the response id and the outcome)

As defined below the payload of a message will contain a type identifier for each parameter, this means messages can be overloaded
and a single message ID can correspond to multiple payload formats.

A response message contains a single payload.


**********
* Fields *
**********

correlation id -  used to match a response id with the corresponding request. (integer, 4 bytes)

                  A correlation ID of 0 is used to indicate that the side sending the message is NOT expecting a response even on failure.

message id     -  Identifier for the message 00 to 7F (byte, 1 byte)

                  createMBean                - 0x01  (Overloaded)
                  unregisterMBean            - 0x02
                  getObjectInstance          - 0x03
                  queryMBeans                - 0x04
                  queryNames                 - 0x05
                  isRegistered               - 0x06
                  getMBeanCount              - 0x07
                  getAttribute               - 0x08
                  getAttributes              - 0x09
                  setAttribute               - 0x0A
                  setAttributes              - 0x0B
                  invoke                     - 0x0C
                  getDefaultDomain           - 0x0D
                  getDomains                 - 0x0E
                  getMBeanInfo               - 0x0F
                  instanceOf                 - 0x10
                  addNotificationListener    - 0x11  (Overloaded)
                  removeNotificationListener - 0x12  (Overloaded)
                  sendNotification           - 0x13
                  
// Internal Messages

                  setKeyPair                 - 0x70
                  begin                      - 0x71                  
                                                                                                          

outcome        -  Success = 0x00  // payload will be return type or if void return type method will return.
                  Failure = 0x01  // payload will be an exception.

parameter      -  {type id}{element count}{data}
                    - element count is only applicable to arrays and collections where multiple items are returned, for these types data will be repeated once for each element. 
                  
payload        -  0 or more parameters.

                  For the methods being directly marshaled from the MBeanServerConnection interface the supported paramters and order of parameters 
                  will match the method definitions on the interface. 

                  Overloaded methods will contain one additional paramter before the method paramters to indicate the number of parameters being passed, this will be of 
                  type int and the value will be the number of paramters passed.
                  
              
response id    -  ID of response message ( {message id} ^ 0x80 )

type           -
                  Attribute            - 0x01
                  AttributeList        - 0x02
                  Exception            - 0x03
                  Object               - 0x04
                  Object[]             - 0x05
                  ObjectName           - 0x06
                  QueryExp             - 0x07
                  String               - 0x08
                  String[]             - 0x09
                  boolean              - 0x0A
                  int                  - 0x0B 
                  ObjectInstance       - 0x0C
                  ObjectInstance (Set) - 0x0D
                  MBeanInfo            - 0x0E
                  ObjectName (Set)     - 0x0F   
                  NotificationFilter   - 0x10
                  Notification         - 0x11
                  Integer[]            - 0x12
                         

****************
*  RPC Methods *
****************
These are the methods that directly call the server from the client and then pass a response
back to the client.

    public void addNotificationListener(ObjectName name,
					ObjectName listener,
					NotificationFilter filter,
					Object handback)
	    throws InstanceNotFoundException, IOException;

    public void removeNotificationListener(ObjectName name,
					   ObjectName listener) 
	throws InstanceNotFoundException, ListenerNotFoundException,
	       IOException;
	       
    public void removeNotificationListener(ObjectName name,
					   ObjectName listener,
					   NotificationFilter filter,
					   Object handback)
	    throws InstanceNotFoundException, ListenerNotFoundException,
		   IOException;

    public ObjectInstance createMBean(String className, ObjectName name)
	    throws ReflectionException, InstanceAlreadyExistsException,
		   MBeanRegistrationException, MBeanException,
		   NotCompliantMBeanException, IOException;

    public ObjectInstance createMBean(String className, ObjectName name,
				      ObjectName loaderName) 
	    throws ReflectionException, InstanceAlreadyExistsException,
		   MBeanRegistrationException, MBeanException,
		   NotCompliantMBeanException, InstanceNotFoundException,
		   IOException;
    public ObjectInstance createMBean(String className, ObjectName name,
				      Object params[], String signature[]) 
	    throws ReflectionException, InstanceAlreadyExistsException,
	    	   MBeanRegistrationException, MBeanException,
	    	   NotCompliantMBeanException, IOException;
    public ObjectInstance createMBean(String className, ObjectName name,
				      ObjectName loaderName, Object params[],
				      String signature[]) 
	    throws ReflectionException, InstanceAlreadyExistsException,
	    	   MBeanRegistrationException, MBeanException,
	    	   NotCompliantMBeanException, InstanceNotFoundException,
	    	   IOException;

    public void unregisterMBean(ObjectName name)
	    throws InstanceNotFoundException, MBeanRegistrationException,
	    	   IOException;
	    	   
    public ObjectInstance getObjectInstance(ObjectName name)
	    throws InstanceNotFoundException, IOException;
	    
    public Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query)
	    throws IOException;
	    
    public Set<ObjectName> queryNames(ObjectName name, QueryExp query)
	    throws IOException;
	    
    public boolean isRegistered(ObjectName name)
	    throws IOException;
	    
    public Integer getMBeanCount()                                        
	    throws IOException;
	    
    public Object getAttribute(ObjectName name, String attribute)
	    throws MBeanException, AttributeNotFoundException,
	    	   InstanceNotFoundException, ReflectionException,
	    	   IOException;
	    	   
    public AttributeList getAttributes(ObjectName name, String[] attributes)
	    throws InstanceNotFoundException, ReflectionException,
		   IOException;
		   
    public void setAttribute(ObjectName name, Attribute attribute)
	    throws InstanceNotFoundException, AttributeNotFoundException,
		   InvalidAttributeValueException, MBeanException, 
		   ReflectionException, IOException;
		   
    public AttributeList setAttributes(ObjectName name,
				       AttributeList attributes)
	throws InstanceNotFoundException, ReflectionException, IOException;
	
    public Object invoke(ObjectName name, String operationName,
			 Object params[], String signature[])
	    throws InstanceNotFoundException, MBeanException,
		   ReflectionException, IOException;
		   
    public String getDefaultDomain()                                        
	    throws IOException;
	    
    public String[] getDomains()
	    throws IOException;
	    
    public MBeanInfo getMBeanInfo(ObjectName name)
	    throws InstanceNotFoundException, IntrospectionException,
	    	   ReflectionException, IOException;
	    	   
    public boolean isInstanceOf(ObjectName name, String className)
	    throws InstanceNotFoundException, IOException;	    	   	    
	    
	    	    		   			   		   	    	   	    	    	    	    	    	    	   	    	   	    	   		   		   



***************************
*  Notification Messages  *
***************************
The handling of notifications are slightly more complex as both the client side and server
side are responsible for handling the correlation of the Notifier registrations and passing
appropriate messages to an from the server.

In addition to the RPC correlation ID there will also be longer living registration ID for any
registered NotificationListener instances.

    public void addNotificationListener(ObjectName name,
					NotificationListener listener,
					NotificationFilter filter,
					Object handback)
	    throws InstanceNotFoundException, IOException;	    
	    
		   
    public void removeNotificationListener(ObjectName name,
					   NotificationListener listener)
	    throws InstanceNotFoundException, ListenerNotFoundException,
		   IOException;
		   
    public void removeNotificationListener(ObjectName name,
					   NotificationListener listener,
					   NotificationFilter filter,
					   Object handback)
	    throws InstanceNotFoundException, ListenerNotFoundException,
		   IOException;
		   
		   		   		   	       	    	    

***********************
*  Internal Messages  *
***********************
These are the internal messages that do not directly tie in to the RPC methods or notification 
messages.

  disconnect  - To notify the other side of the connection that a non-optional disconnect will now occur.
  
                This could be client deciding to close the connection or could be the server shutting down,
                additional management could be added to the server to terminate existing connection.
                
                Once received the receiving side of the message should clean up all state related to 
                the connection and emit notifications as required.

  sendNotification - To pass a notification from the server to the client for a client side notification listener.
                     Parameters - int listenerId
                                  Notification notification
                                  Object handback

  removeNotificationListener - An additional message to tell the server side to remove a remote/client based listener.
                               int[] listenerIDs











